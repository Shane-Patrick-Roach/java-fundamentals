/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;
import java.util.stream.Collectors;

public class Library {
    public ArrayList<Integer> roll(int n){
        ArrayList<Integer> myRolls = new ArrayList<>();
        int max = 6;
        int min = 1;
        Random rand = new Random();

        for (int i = 0; i < n; i++) {
            int randomNum = rand.nextInt((max - min) + 1) + min;
            myRolls.add(randomNum);
        }
        //System.out.println(myRolls);
        return myRolls;
    }

    public boolean containsDuplicates(int[] array){
        int counter = 0;
        boolean containsDuplicates;

        for (int i = 0; i < array.length; i++){
            for (int j = i+1; j < array.length; j++) {
                if (j!=i && array[i] == array[j]) {
                    counter++;
                }
            }
        }

        if (counter>0){
            containsDuplicates = true;
        } else {
            containsDuplicates = false;
        }

        System.out.println(containsDuplicates);
        return containsDuplicates;
    }

    public int averageOfArray(int[] array){
        int bucket = 0;
        for (int i = 0; i < array.length; i++){
            bucket += array[i];
        }
        int average = bucket/array.length;

        return average;
    }

    public String highestAverageArray(int[][] array){

        ArrayList<Integer> bucketArray = new ArrayList<>();

        for (int i = 0; i < array.length; i++){
            int bucket = 0;
            int lengthArray = array[i].length;
            for (int innerArray = 0; innerArray < array[i].length; innerArray++){
                bucket += array[i][innerArray];
            }
            bucketArray.add(bucket/lengthArray);
        }
        int maxValue = Collections.min(bucketArray);
        int indexOfMax = bucketArray.indexOf(maxValue);

        return Arrays.toString(array[indexOfMax]);
    }

    public String analyzeWeatherData(int[][] array){
        HashSet<Integer> uniqueWeatherValues = new HashSet<>();

        for (int i = 0; i < array.length; i++){
            for (int j = 0; j< array[i].length; j++){
                uniqueWeatherValues.add(array[i][j]);
            }
        }

        ArrayList<String> missingWeatherTemps = new ArrayList<>();

        int max = Collections.max(uniqueWeatherValues);
        int min = Collections.min(uniqueWeatherValues);
        missingWeatherTemps.add("Min: "+ min);
        missingWeatherTemps.add("Max: "+ max);



        for (int i = min; i < min + (max-min); i++ ) {
            if (!uniqueWeatherValues.contains(i)) {
                missingWeatherTemps.add("Never saw temperature: " + i);
            }
        }

        String str = missingWeatherTemps.stream().collect(Collectors.joining("\n"));
        return str;
    }

    public String tally(String[] votes){

        HashMap<String, Integer> tallyVotesMap = new HashMap<>();

        for (String person : votes){
            if (tallyVotesMap.containsKey(person)){
                int numOfTimes = tallyVotesMap.get(person);
                tallyVotesMap.put(person, numOfTimes + 1);
            } else {
                tallyVotesMap.put(person, 1);
            }
        }

        int max = Collections.max(tallyVotesMap.values());
        List<String> winner = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : tallyVotesMap.entrySet()){
            if (entry.getValue()==max) {
                winner.add(entry.getKey());
            }
        }

        String voterWinner = "";
        for (String person : winner){
            voterWinner = person + " received the most votes!";
        }

        return voterWinner;
    }


}
